#define DEBUG
#define BHJL_HE_MR_INTERATIONS 16

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <gmp.h>
#include <iostream>
#include <chrono>
#include <thread>
#include <map>
#include <math.h> 
using namespace std;


void compute_nth_power_residue_symbol(mpz_ptr nth_power_res,mpz_srcptr a, mpz_srcptr p, mpz_srcptr N){
	mpz_t ONE;
	mpz_init (ONE);

	mpz_set_ui (ONE, 1);
	mpz_sub(nth_power_res, p, ONE); // p - 1
	mpz_fdiv_q (nth_power_res, nth_power_res, N);// (p-1)/N
	mpz_powm (nth_power_res, a, nth_power_res, p);// a^((p-1)/N)) mod p

	mpz_clear (ONE);
}
char* get_sub_str(char *str, int start, unsigned long int len)
{
    char* res = (char*)malloc(len + 1);
    res[len] = 0;
    memcpy(res, str + start - 1, len);
    return res;
}

void decrpt(std::map<string, unsigned long int> &ptr_indext,unsigned long int s, unsigned long int l, mpz_srcptr two_pow_l, mpz_ptr recover_m, mpz_srcptr y, mpz_srcptr c, unsigned long int k, mpz_srcptr p, std::map<unsigned long int, mpz_t> &y_p_map, std::map<unsigned long int, mpz_t> &Z_map, std::map<unsigned long int, std::map<unsigned long int, mpz_t>> &IT){
	mpz_t two_pow_k,TWO,t,tmp_m,r;
	mpz_init (two_pow_k);
	mpz_init (TWO);
	mpz_init (t);
	mpz_init (tmp_m);
	mpz_init (r);
	
	mpz_set_ui (TWO, 2);
	mpz_pow_ui (two_pow_k, TWO, s*l);
//	cout << "compute Z" << endl;
  //  	auto start_time = chrono::steady_clock::now();

	compute_nth_power_residue_symbol(Z_map[s], c, p, two_pow_k);

	for(size_t z_index = s - 1; z_index > 0; z_index--){
		mpz_powm_ui (Z_map[z_index], Z_map[z_index + 1], (unsigned long int) pow(2, l), p);// z[i+1]^2 mod p
	}
    //auto end_time = chrono::steady_clock::now(); // end to count the time

    //auto running_time = end_time - start_time;
    //cout << "Z computition takes time = "
    //<< chrono::duration <double, milli> (running_time).count() << " ms" << endl;
    //cout << mpz_cmp(y_p_map[1], IT[1][1]) << endl;
    //cout << mpz_cmp(y_p_map[1], Z_map[1]) << endl;
	
    for(unsigned long int i = 1; i < s + 1; i++){
		unsigned long int itindex;
		mpz_set (tmp_m, recover_m);
		
//		gmp_printf ("m: %Zd\n", recover_m);
		mpz_set (t, Z_map[i]);
		//mpz_set_ui (t, 1);
		size_t shift = 1;
		size_t m_size = mpz_sizeinbase(tmp_m, 2);
		while(mpz_cmp_ui (tmp_m, 0) > 0 && shift < i){
			itindex = mpz_fdiv_r_ui (r, tmp_m, (unsigned long int) pow(2, l));
			if (itindex != 0){
				mpz_mul (t, t, IT[i - shift + 1][itindex]);
				mpz_mod (t, t, p);
			}
			shift = shift + 1;
			mpz_fdiv_q_2exp(tmp_m, tmp_m, l);
		}
		for (std::map<unsigned long int, mpz_t>::iterator it=y_p_map.begin(); it!=y_p_map.end(); ++it){
			if (mpz_cmp(t, it->second) == 0){
				mpz_set_ui (tmp_m, it->first);
				mpz_mul_2exp (tmp_m, tmp_m, (i - 1)*l);
				mpz_add (recover_m, recover_m, tmp_m);
			}
		}
		//exit(0);
	}
	
	mpz_clear (two_pow_k);
	mpz_clear (TWO);
	mpz_clear (t);
	mpz_clear (tmp_m);
}

void map_new(std::map<unsigned long int, mpz_t> &map, unsigned long int k)
{
    for(unsigned long int i = 1; i < k + 1; i++){
        mpz_init (map[i]);
    }
}

void map_2new(std::map<unsigned long int, std::map<unsigned long int, mpz_t>> &map, unsigned long int s, unsigned long int l)
{
    for(unsigned long int i = 1; i < s + 1; i++){
        for(unsigned long int j = 1; j < (unsigned long int)pow(2,l); j++){
		mpz_init (map[i][j]);
	}
    }
}

void map_2clear(std::map<unsigned long int, std::map<unsigned long int, mpz_t>> &map, unsigned long int s, unsigned long int l)
{
    for(unsigned long int i = 1; i < s + 1; i++){
        for(unsigned long int j = 1; j < (unsigned long int)pow(2,l); j++){
		mpz_clear (map[i][j]);
	}
    }
}

void map_clear(std::map<unsigned long int, mpz_t> &map, unsigned long int k)
{
    for(unsigned long int i = 1; i < k + 1; i++){
        mpz_clear (map[i]);
    }
}

int main()
{
    
    unsigned long int k = 910, l=10, s=91;

    mpz_t p,recover_m,c,N,y,two_pow_i,TWO,two_pow_l,y_p_2l,ONE,two_pow_k;
    mpz_init (p);
    mpz_init (y);
    mpz_init (recover_m);
    mpz_init (c);
    mpz_init (N);
    mpz_init (two_pow_i);
    mpz_init (two_pow_l);
    mpz_init (two_pow_k);
    mpz_init (TWO);
    mpz_init (y_p_2l);
    mpz_init (ONE);

    std::map<unsigned long int, mpz_t> y_p_map;
    std::map<string, unsigned long int> ptr_indext;
    std::map<unsigned long int, mpz_t> Z_map;
    std::map<unsigned long int, std::map<unsigned long int,mpz_t>> IT;
    map_new(y_p_map, (unsigned long int) pow(2, l) - 1);
    map_new(Z_map, k);
    map_2new(IT, s, l);

    mpz_set_ui (TWO, 2);
    mpz_set_ui (ONE, 1);
    mpz_set_ui (recover_m, 0);
    cout << "k bits: 910, p bits: 2080" << ", s: " << s << ", l: " << l << endl;  
    static const char * p_prime = "70108548679682803020890046206003958156232228711262152469128048980088228367908019025998286153565996792044757894914953966665373649889845665346895043623054270403546650491911110026863353405596658836200797616297941732810109741262778442138191715139217636149065884530316936896991447667769746670896893578003955256137270302746519260115673874316610096416913571734756210147099967969467167881504594281513822061092021346606162107780254798997301986902405679798772068345442476476339712347653878140163473306301353024213338859759238312221566470748054234238296414415741730131267341192106037675658086401752519326948165959860418885846694887424001";
    mpz_set_str (p, p_prime, 10);
    static const char * c_char = "555148132540298640007312117135378220170693174369203485916374189816110984570071350644475576223317825260631971745188411252927568990802142017269971484757145629462697248403692947174791104337351163818497944607919945441754718522433290802241742748675446015195952717429901604736546673212365782041768615895810305444447471417002567545654475542330994407322482683531698260394458253665013340599292909600791492079400162864475679184451910771150735303944722430904361160744182849481917099216767701194849574863691623820905693708069113341605511108451146070404137561021286721614895209475952655317391030896983247901805972163915758316115315029259054718117751842624197312592182196461918845230911886004980338639148083552780673058419490012025236453109641452917461841891671238030157230458093684884151780004820428267856401642085052162053314494338851713659805365282265448482448733346307574545098629657325593220197416779184319246652337452128748266937914714442988551444311652973785014160084433936519254948973279233284173237641970591307086729170144642943137908409854561366469897802614780052374314002733958290677361753734540587863200543696780672835252790871477428465926050228208472878056932682581717864950752091301561029288696303415006130674633109529527181274991737082728879725418937";
    mpz_set_str (c, c_char, 10);
    static const char * N_char = "9667789470394857448323792032406840787278891162378385995747773186858148002973694040158646197326714113384774975106300425753890707397725774777265867073097095564511256919375156773491283802215510260357003845194562407440542048237850057902215938570871056967816780834553542895798517480302482301708743931359686688449340243656325225675244689102940938930731315757535489467928237781837652167367857004580556382430048039320943427999869698262597546500543267068477541035185287000983290975943564716880604261701968857434207060007925972253083942340206074151020938866873068699981637758483726680007052678047467090574582097714898066394727429570660141136413714139757803163594110071369643338381928458680112390481590478013592016494697942447217809635067509891219776634948512424834843747682117268921269325196733118741623709113156497944660121671607330667337007155040407062545097080300590167383279421832589196990631036517984971422610354762684900908206618484607531138542126541437048366229793130013330078377640474657200212570640096364223039585027263337177378094848333005950075738203213579991208323016762544383212734908539067286500844880914565209847548109196802920317639277550678286424655435954647269702475266025297414037102610996896289822348051799675887323926525937150144148205134059";
    mpz_set_str (N, N_char, 10);
    static const char * y_char = "5913696773752669035536838443325202756436428840415622750717822850014016743928341679137861806528424093079263828619433924943674335866183794383530012561425472017602429040297801074035417896044518929877431986226745246044175946841484590176123473225018868235669725343677330878406987077783587872886225877497283431852679690795570467515100852046843971108355061522258774860899907909065181755500537288927823138572817163260496112489101872124424044589896294696833586131543196254828528793361365577513905290355189842112157114262267478249997149539246510872263430083355438357821480261096307536557370256712138166345324543413787948898886012576195158496227155855384141775069509861697166600975903499570919021299627982602099335982087042654525997893862642493557919334207699756839972089146291493238228214572806717314536120550306241174454702744993634371194787373000775256899023363693783556633092798277503849955867708463831869588146434986851520390027180945160758114492874435002280097728466554354010363386850954082694478172108776018536673355958653427664980144755127566545687690015119524989273298670714870768100106875625879189113150648356541454416034734886891271193773939150101193577476037675335258493069600674598408024235032679364931472862955042135747562791096318108700514146061540";
    mpz_set_str (y, y_char, 10);
    //gmp_printf ("y: %Zd\n", y);

    mpz_pow_ui (two_pow_l, TWO, l);
    mpz_pow_ui (two_pow_k, TWO, k);
    compute_nth_power_residue_symbol(y_p_2l, y, p, two_pow_l);

    mpz_set_ui (y_p_map[0], 1);
    for(unsigned long int i = 1; i < (unsigned long int)pow(2,l); i++){
    	mpz_powm_ui (y_p_map[i], y_p_2l, i, p);
    }
    
    for(unsigned long int i = 1; i < s + 1; i++){
	mpz_pow_ui (two_pow_i, TWO, i*l);
	compute_nth_power_residue_symbol(y_p_2l, y, p, two_pow_i);
        for(unsigned long int j = 1; j < (unsigned long int)pow(2,l); j++){
		mpz_powm_ui (IT[i][j], y_p_2l, j, p);
		mpz_invert (IT[i][j], IT[i][j], p);
	}
    }

    auto start_time = chrono::steady_clock::now();
    
    decrpt(ptr_indext, s, l, two_pow_l, recover_m, y, c, k, p, y_p_map, Z_map, IT);

    auto end_time = chrono::steady_clock::now(); // end to count the time

    gmp_printf ("recover_m: %Zd\n", recover_m);
    auto running_time = end_time - start_time;
    cout << "Decryption takes time = "
    << chrono::duration <double, milli> (running_time).count() << " ms" << endl;
    cout << "----------------------------------------------------" << endl;
    k = 1160;
    s = 116;
    l = 10;

    std::map<unsigned long int, mpz_t> y_p_map1;
    std::map<unsigned long int, mpz_t> Z_map1;
    std::map<unsigned long int, std::map<unsigned long int,mpz_t>> IT1;
    map_new(y_p_map1, (unsigned long int) pow(2, l) - 1);
    map_new(Z_map1, k);
    map_2new(IT1, s, l);

    cout << "k bits: " << k << ", p bits: 3840" << ", s: " << s << ", l: " << l << endl;  
    static const char * p_prime1 = "4610482151251308867970107143597909608184465366831179470296680694840967837839726174903869859183512986480275336122458511269876437299855820527212699821321859067688485438731831548289617618727502970642923711438080538098039716494732859169701221443171149733359472279443516575656572243035607504088233331039692497781837126507132048523458108572229552185805132009418984332675096737072031259816545054523222029339641435644200674674993325115204647398013206246893437459967122103854572731442903916406172180498461329896941216998193004585424598602271687231587088930100343531460128886079774140080821143871966143024896267039486142414037471071032594571932066716000744970870514355759908095823751659127539261620362422587620549490302730514377384102513543949216963062704792950283515502193834413453930936540804227133786224835107712981435584051027425283092932837057788488871027129979977638857906106917995985054219398168933936879464221512503509578577506816885044861680751016720967211232829701338606574165668161781597608746226597091926863902503194701394134474638516739987694506690723215678457449723534073048855274541193240811164348045358023332872277476723258685742220700513583440592897";
    mpz_set_str (p, p_prime1, 10);
    static const char *c_char1 = "20087525662435106519136166859703990010048542316029875904901799402686340361074318631278326888829504330870218710389176711849582345091483725986495087528035945113165927862370381808710080403069693516535278778479769481645121697356241221287440251785134517518834093478141322015295664555507365531503501206854786840098949406303396908183106853818068397246684741646256493365660760843213579709504455071241976412095890396978783594080895603649236930757032134373606215429050139918564120001221823387255069372482955042461326360851397797269618628562914363113681314972214080289895493640375420973366935096364647141056378656609624101406921176373844636954049089372164535676685970464482754680894982103349381278559217395154866061762588327593029771549121897210280815023099726119120930728578788570668141865782338692025051078583188128712985071321265650639273509781093339539075707633299260434850492900265482492365146503284580056516127417163502158370730236227868013133531643141042100723650458465760626762825705565270107474148020243121413139847670262555502309904500733326334865903769121814294170342962419431343543669382308223937928047020825944976154736698639077783562476090249643313919812915008401796710279532139523925863622884083327130730501664270686946752129020647098001717647245486091779849621981700748440503936143310532483769769524589055060361884206600489946128970012264223218050270839102659579748450816482291363925614797326078600394283954966364285173907779728839851876276982838604953030711973780740587005576621098946186824609592786317628358771779331688553751290209392400669364732727821283928728715160668112931171750270183713916063563860869838148264295603019355721394852399437257223570096250910108080042568538980883039760369472093721092212219086797959725688591336145247166295224949532116279806440791261817507027315593827160092282294367494307958432303427275954590116228749137499205900191660768373294103002056005748486729962574422580379255986862159461194466390372870617262258880132324476984813497069949746036131387943725711453290931996035329954579039726758200694207414044197264556689319757882134649664950284003867245856362187812699368896854600069240434823139329116261644585599830485043163667100996199366190372961609597934644786683611008174721985286028901071860634732953350854889490017347344194936297706338120723754375668427543350439374343310";
    mpz_set_str (c, c_char1, 10);
    static const char * N_char1 = "24744204449074635345251630423034857759121054378363690706582777081562936504649423411794242020731198419680137714073579181074978717997571962243443420012479872583901866490984759015955306854440970954784890599506421674220510816187272015229846618047435899824412748407652742779655570068287638831481345379222387022909758648072722042907752050243011142429796630020989345971525708435133780408062145144350742919474470658939581213246825135002905628523746374750592909102468108761728982934990185391989983412330528590343734265375067719563548603817619400084011898337892574537197970589253268498865053159460954751151942314152982345304436945822089511389867142319689363236464046093860229921427253599460644351950385762450303270671968257518352596984967342621192979819984571072810959408140632793751797524724976645660475021576128555833001811865720541759235421496623913037073896314466437153559407672872937470459952374562398541583869689934429561410156420890806388688184757182518860687705709994499140854150824397605807060620746509301864299741532744826842741386128832404257971588228951522934467031658642960298051531669262761344305819022354167260775248205385591634867474523403585600896958539665945611677278031187399463775697266898503668292559015580323205154965276332320015432851095421036696294618614395807904020381568932819951107943150834728765806200563376528268751185059739668063685373650883692101224942922236466540646735488363959511054011724706792849518087673561877044819372171205585040365593847102520798690623168115325397225780683857958276692040172233180647216351146610020333510659959549729905091743011462535334017093154341264609727129905494395566082919525210739918190841014560453310584492850512037890194822198087128442166346315619942747201019554308007776788803472243666579189711853208676316880589446962394350627460996422399920860604321236564804305125839518476674364116030930695724982216776830495020885779057664433591478698242846351608642132991717460742857875930665993761085451645208179420369161411476234598905396490969251304264122622160462000484398471726630367130272010714230456812172336070725764000094979732672081219341041287167331319975559554727431128653841222105649063658761834816581888812391367783309694168621319031391405968069527021054201909762958310552774215073932433773843078178991690277769627660321827138633882710746345657057213831";
    mpz_set_str (N, N_char1, 10);
    static const char * y_char1 = "16461449018036225817928898285456602670677051910343933140401867237433787000279090302614408217506812130220351191034184939976703197128436089805618526624056487502138658714261872136571863009823230760960139582151193391065222523111506188330905500347954103077200588108976606214482722843247268368916947512893037261667667575143381910816940731473168299584233310475072135668529058577989246774929787788242475319669621769020830793277815243548805791781761530265307285320426071675625759787537118333782463253902067970635349829962194566859296578698259352263318553745866630446370863215589761301600516634833699961593704453187324859891745055014527600316829270152223466367643914429983999506307906653959905104538307137351022036886120687866246313497012759135639085368112809705199612123910750107959901868571677356391406770756154793088016821742787370364911238056374234015001197201752399471342718946454037499023351540811843126159649261470788110568933169348136442187868427415651125709348898705832955163758215443373987057157970381252423658902290305022493058256197741261802889777569364184598626539714399517783091698713427268243829386118397068436435886459038599426977838477908068154654882783463803274093755003914994199659852740297987994401408795585137089892043954951298489672871553498184608035991806380332874402042800556202234662087475606880127372980565479281490434575120953749475592082555879107683044249081959051661152604108920772800288506654103402086371632000970842423015100076624267917108381397938296578797314370469836603531162237514498642671658947473972757887199477692663423642347562448530545844494160442610074433916714030345856913896392391750478945101021103639201930827511687562016777091186444618326448352917646186693423934034553617801582685710215945571607420796964628246721829007599565592981405876809970856647127278867271986118490420575518011490863055638980672548537888226783005266701150427748129131486240459520790069915477453838905043544777628724209804092845354133004475730062003136215650748377541001921777566584312631823010880351362778463582626121369249960661567566878471307713444041617184439681378577081338699510032949768626235313306006374549391483455375807614222672016460877879086121765158789952191857430606964972099372461811927513713011471591692098447496607067396380583617667705684719614351324039317653122837579087889361911140972935";
    mpz_set_str (y, y_char1, 10);
    mpz_set_ui (recover_m, 0);
    mpz_set_ui (two_pow_i, 1);
    mpz_set_ui (y_p_2l, 1);
    mpz_pow_ui (two_pow_l, TWO, l);
    mpz_pow_ui (two_pow_k, TWO, k);

    compute_nth_power_residue_symbol(y_p_2l, y, p, two_pow_l);

    mpz_set_ui (y_p_map1[0], 1);
    for(unsigned long int i = 1; i < (unsigned long int)pow(2,l); i++){
    	mpz_powm_ui (y_p_map1[i], y_p_2l, i, p);
    }
    
    for(unsigned long int i = 1; i < s + 1; i++){
	mpz_pow_ui (two_pow_i, TWO, i*l);
	compute_nth_power_residue_symbol(y_p_2l, y, p, two_pow_i);
        for(unsigned long int j = 1; j < (unsigned long int)pow(2,l); j++){
		mpz_powm_ui (IT1[i][j], y_p_2l, j, p);
		mpz_invert (IT1[i][j], IT1[i][j], p);
	}
    }

    start_time = chrono::steady_clock::now();
    //generate_prime_optimized(p, p_bits, p_min_bits, k, 3623);
    decrpt(ptr_indext, s, l, two_pow_l, recover_m, y, c, k, p, y_p_map1, Z_map1, IT1);

    end_time = chrono::steady_clock::now(); // end to count the time

    gmp_printf ("recover_m: %Zd\n", recover_m);
    running_time = end_time - start_time;
    cout << "Decryption takes time = "
    << chrono::duration <double, milli> (running_time).count() << " ms" << endl;
    cout << "----------------------------------------------------" << endl;
    
    k = 1680;
    s = 168;
    l = 10;

    std::map<unsigned long int, mpz_t> y_p_map2;
    std::map<unsigned long int, mpz_t> Z_map2;
    std::map<unsigned long int, std::map<unsigned long int,mpz_t>> IT2;
    map_new(y_p_map2, (unsigned long int) pow(2, l) - 1);
    map_new(Z_map2, k);
    map_2new(IT2, s, l);


    cout << "k bits: " << k << ", p bits: 7680" << ", s: " << s << ", l: " << l << endl;  

    static const char * p_prime2 = "40675856236854884365635268877402285427359338763187328278413549539226827624591756983685418600237252090492584017445765356120599301636842979281970102818198233683611773172690503343343208832013944541412412020028162612560397863056904670493331830823130845685886453609547905146074547930062946081368309337380880577179097714759274926358540340303532694585814180285926826178316885728355448784711402239353043862286867140399643226639297352781981931014207185549059843554384235600006073771503665610024351546615855880063660472164035910429829069809688698508938156390127288596788871015135547768980744693451904130184440406651724006535705402069127150532033468919963022265279559502936615090449152203221581841913311931277596267922375979175792713068463470277000027789212965818617019421614134257409372937253078220139593555044577628314714556793466369691182185939713100905662813515838267635363599660913373221005308632793032269186652073699738710543751783687730897635771795604246991070938442316139864523850362339463759368056745308388710167440385186505913505431648723444644038253758979061549229850147682468416536131563365249780973112422552158879486487672051494465502096841293378166054215731907360866651634760133218821027223929034528698341327860216983041576153224852065007057087117648784309163255704328648328617312270427856476467888307339279908258795636463896882960047951532542356269704950204028681203757268058978211616807383338403709357467850548750055199390942204442130802360102717642235138153533414646346267283257497586128427794919403011249814113917405553088604332697128859492698921522619479437445742956500844185787297137581902153821128142185562581752326328630194540160090351523617942133759452665594318509148428611335458059633407994882460927350265588926152796742710725895318429733124051066978635662079706765530111741422003243574330512332050704905581035465069421729598762733815068041789355230084542351918999436866476086925619404878621786456577499079709079280040896483420534747522077359302496806377334696225086907038953764140901790529255088745381731914235506623689119219577700726631163599442737830481866269313631682476550928698491372342659273410446660017822580390758789756910360222557992270842831707519460905607995130382334575627523697747735609401361128083593215505091317191784302750171691457572636799090688921257622051791056994824761294979073";
    mpz_set_str (p, p_prime2, 10);
    static const char *c_char2 = "845106577583037254039585753810819176082351369313443651601456472587791966869882133037318014372152505497570934758689336117979274739515938422813889483299290570716437369811024550992502496935180561155846688645399559655248952561665139871838496055618646618952761531167823913117155687673358187398824703898655017234628206347783230312230493622383312714306418608623199304679760377808285912178278596731755494766922747240339791138653325813472088376397755364211144509463888225034365538770097273350610902235312455217901546991193374477097076779624981476965398282486917186081041975331616520477178369570602953151036181827656125357258447124170243760134410812348202852429039722598017910710626070730953738989454928152781839377980551486195820211306428102285090259620346208980514632818009418071582601570664935021875471684904471866626474599395165105580037519380828014601938660592424694698972828052760589509887153711711409158609072268167281884190038079461835711884975753021123940432649216652560157177514551351870800596637099569264901754679999214255579484916426934861594362712507530562341993236545742430172742890605552369453030653281607757561061649835838777848368919583637308063663635904032562121494619788930420346916358163754540002452071725894530125428522727351278926489840058715094068066716659533498904088011255470285047655376268153113979129588854131862628203786691417243778513387506525415877620611682343034323357787167482826070810751633008902721182336225262938317728016655266262812687551822916652398794636389502779985164738038804170462685259896176591210721254271203948073432779050595732619136634925800451124026788247070603026935078126622924513358146813092179161983955222766658327648550522400475117286991976215117460126665309975702372307124147064613648300173170176950584920528386836255287223149349926192053867186407114897577619478865848929914865955312890873853163812148368334417138508123314822870297514558293891220150892366813904028612541691239196474392018167669779021546657143480603433980793485285367105165488973592296432536535244528929332278162808045503402849655498701894328390296669639912792035857978327074718606875578038978173609046853143653354443893025613247279677301744313391390185738631963976958018796276531763106895690573368770262915619596896701334031052963720681663000359427158062577050489903508983482013162757578559660980499356263019291861279725763780797618562288918178199479176137063311966005730419510462339954161590159404248474496797519302297060773172016217798887983199750123848806610537116108846448756652919067181073809603603840898684849404396862340345402442130217382872838168032361789912457942037934229490741374918494823659489641506729743644792856043395445580468193558380468654301524808981087116174022952056917147555553989964857054851147438669657077655159033717225383836264954470169681952614977052163650834663942797719666588192652898405675529444059153568694607120156664532126318391207165583970977215483641877910773151550926581444355313470713769368437654963313479948063002016824393861340887002025234247576869629257505219757901884719278764331529274439284301716301577431057979193830417985585353798112556643637557097917028356628430380001050120725250105805942474498830017549366386572590929460398682462524077821304021323431402669065507005644374671195613346094464707970340818995386201303049965265893383209977907367410148380401461573589737983580895919007881939572080556225497491873818419312178839331416163831514195300689106392187955327872482620076518546565535197894308247928824563261912793910615966484130452361582471447137626499206663351549882464503668266002813468824314102320703560280321000260564436310062170326875901366970457977329345483236900841457679099409084070417531059909613668316631167130998478856656646099303600779907210170228198071711165033405666846933444358639998677153424842984027149576374110651382522889995484134475070012065063411110948905647396775794906382032888196952519705689916872269963839433509860084979042514870715481244609103783023914856579634191779573294656017639544694917676765753318035551918707873516266455972434671571189950596323173048184582043487577505336152368952532371519036097280590493927682636341802708328819704039759596972473806822289842215589600634403471338011636185098158339978489482256401916888065445465173605318899693501882751244524452038058104466661319996696050411172443426927938824120680662236034075106742923427034830534615910963695819622579585131674327971208563397286549471864902797491891906924987096745011990425449796119711112823139245179887791987171366250947113651451721691186849301952770743681242143389031539133333200130617962192118665623864344838039328900583877090409629639330813515452667638605092169";
    mpz_set_str (c, c_char2, 10);
    static const char * N_char2 = "1654525280601286394806699338615448558449340767087689272222654313434956038891789603504108860549282274086997072509964583034813035807745148507617741339128711638923264452217423624008026968369786888823978027832801049481024236427134050712802125841637936361299061511772197233392046045088537060744087767182940236771416662662759969005966191749295723069147277821649644352569459459616692711103489961098801227396352899683738561315645825884780859357890085385400775986500846160166999213234421462431399883827533013657992531417976216907548983317807322673360860422804194311340631376545457290191366729138613641610769021772000759275444822777901368049699233217077230578680476472696005653592527789066459049067457180261789379554781909447618884092441263930781514725343806384539152346928571535354375974784623128259710181197301574216815659008672179865186281835282361700395315866532952867092230397512435838503079057942265400911915570846684393438377526286972941100866375156332829959592561389210318789655427924529403348444320643436718258170315011668922994335736615302496261230265829008230380789882088997453744909423720492636920808885120764747828996204345169398872023199348255058971526984798141906361314568830803753106600151850298377842057574085087082722329515868862144091797300023531697791275488421050957180293279894112550682544445873994877313020324149770588245295330608088686940361770681834972801836745115542065654629872642953415901636610452106129148660656077949621908063510288981519570554490361052347126504559001805501995910068605526895166279729872240928697021767782802656628215943109696597858748778219465166676919168302256469075904063182267321155168662288807671316304786930704189515131937908310908635362109855239645613083554801324165896867823611565909732932900680098673836833317797205151350974366273646160951147772814747365657415229057551610484649685692158015648709212852519023643969662671847058612636841634042030776233836426198168807425638968209000821466771301316948205133551353768786277971039467055565543870636509928816838290548441321262716011474162512166413306930180072451586573902627799209080790862303415772614296978544108246412105887949576388505106366447328414613503955580210046411462021783157480987474415054475063228747292826671985830661414725999688897919354437516869485242945258145854590811007607521563460834954828349664350690678934310385239380653018839170997392639361273914090556346314490562443963959811158503708946792971755284490491499388956846003305993838618718010262472615542598648819174635338194944143720662768039422733150694213317041894220400481192008916634364048159110596080927536368934018327593158857592460205604808446765158651820916865925631331544947756883812024434156353355786310343258749543163421060463803736486760127264581285047919952552195897076221253230468423108306547316224777221959654370109726589343497790525878394588141622860811204524948140249729593723451866772731183724489112171602698273158071849571540108676178674528236513016605322895142948583507869730825773706759761052968054865930339829119396493006233997439961051686173399209760079490968309312355915556179280282656599950652706704409118487968793748831204518747291571829857122112937749851873494968409099747109288088699820487684872464144717121242052963351119702365456795176072398230072708667085823693726592001448009968714588287448398430132174639691561457855171591744019896076057801589489094365812797789115942339305027624269563977348498341962405102901870136607240737393901326762032393195178466506464506669153115498840887845607585067869296154174471494066957381382786903193122254761577731266711678337363651720691864622837557223252769647595536271540723783129891089576046598238407080921503347794805421458958962436600181215007542049444263621464718759431190982502407393216566262225395301766018691747765479497311992446486775393308339015550439148663258732757538546521535782292151844099926639182196051452799499746871499622620719837023525464207424909687134333254358374583004176842415372255284861749017672897667470387833878622664580792287982586972098461473414534852558144480583664105001548271050029170605478740467942345993888027194632094502127334461299353558520168734843000849520775856264929105757565143771993181989852287967626151597861378862516808635236396162999639354055412918864543916617827027205477055675587611654070073947733246200996797134703279412224163663432540753190312808797975126384480690429272529058336350625087192119215618432763127389800510674733978601242688952868162910386733331920004883816955411876973651392857099907695221267791935447591211660503253591254376438713396354787899715524504090134783077387789877647831134382293965610914209107485100085111045854786507431441703359";
    mpz_set_str (N, N_char2, 10);

    static const char * y_char2 ="985612812264598405124972750978398395224103627092460778629110687270883311270381484262532313753344951888771299573769864345252235041268794089464868593135326136616368153602491225262076698245102900566586079574396327888875029061748121158676814303644070712078736913976206539495033005006305082428958797629898071004409891252559607765767418638100158786530185076770977811919412802335842838197916933401416029125324410557316569073410113892736329245680581501196511677103168535546587326968458166129001626266762784549627961506792762357584300982431492529045592525552717854424561321942160122336741226657041278062775285477829482729470063385212286790764394280130821947575721673842865376385353511398662549133298642795525213385145013193455205257897567397895717174134437729987252357204837959783767125132225266203320322528851046315396441224592320578100624641499357324574468324543962783278825744093180591111587613716086484442595759903001964540185847974749254892339906536517732105920643276578969396646413475730413100363815709743041949963847018001926678125825377180602846394938193768002766838924058637359097980597970631139952189312192741758531610012370977044300627986493774277682395392410564833266039666510509527273069487548818017095504347601651854496193634313419368020931248580811654259859918212064537361642583073851168328656887134555862292571106721210210905071793851193186636199709995552761936166908730573270077524589983935729012442725652317291320928790021908739535670824199700420733765968073373481899174962472823199085486867357561882622424197065141476354179281355081892561507928336512111463680896478465817569821719764586299906333929878714925454266826766594114313266713551656726365317068411525462455103794655319080182768766560801750073880902724301945500980981198766751271577718679448824584874369200712755147862341988269561171506088045415337578273157008062343892214734525681845432986844333345839597103780847821485856703788170951903951697228810086986956010318824880974398366818914643496702449481139373584312786515686176415527942344778846373232112659935174871509160150505182016123854684621280246099301835528378179966805488780904910548396878321146023621739769708812035157748907201504088687430710345554528356349693158598926152164004335716458641148837678808481189191324691402734531420394700354093347145364974359737278204654832511816731762181438806962716488400723803817561718328920494359811599419432612413382280326326419879510686782449430374666260317758398969147089707400522405095550795388665083871677821203868242646837308760369608273030477267152030454564710217059999881729161456395953139063551910485396892011492865273657598132321067216588922469205942381971967864315385558272589581394238731083910966258295486891286431776813724080403044485186777261387430345422581271540870535389877450547817874263539553126633754631403940442075869712162597643973369791490020449423384424121616743897104828504435499258687852787463139477361910574050677892382649969466427146346969620934524843872934496988042143882990137609966846540299714145370924991877921574149226991063634923646677552152668765884497041390191644872944624483854695290218682218681388874963059666078945054129379488982000520500929709637088694930045287919933925641513977767409841474653576990378962387496811217787981272803293395761677385018152329096530101045202710314664226236124893488524210511679612844924121934811380756844583776166304960776110505948824130181596108265778474424590288732684365629074646516066100434495291188046098810057912089537584556250012742774064231805455886586388970273315847923379469683824453123406937923637253919855545412781110043138575987442286570654904424783849798008410981610820079991884570814661938516057273962472007928132598879425625264638867874745899448473302297068858372055009882186254858681555617380140520836302109027460573079269462518218082386410724987081197486380265396130929926337560726746244873679269902401406818839795913389566739989904511014605070324576345660632468163790782438711214408647523847225322152075267030740649766595131577192121634819827810613097625816736579395604715607946253146564577568075555262747294483897144572789799106794218934371883070228189139091606475619189651260532915147338418817528524363232614363827011838894958274401107032404017381756332135389621776244719710187136976279982259786286925873736285807213725802580917485353728916929754578094294102250489335734085191670646885329994830316958522219602006928156932632706955265579468420947161444976303557410781259823215756537692823867259262387940129575207927061311846916342208801885163050634635474367292049643534416072199115357928661430812226042180544290568360078517142813291609493888325497819274898262006361736295601987";
    mpz_set_str (y, y_char2, 10);
    mpz_set_ui (recover_m, 0);
    mpz_set_ui (two_pow_i, 1);
    mpz_set_ui (y_p_2l, 1);
    mpz_pow_ui (two_pow_l, TWO, l);
    mpz_pow_ui (two_pow_k, TWO, k);

    compute_nth_power_residue_symbol(y_p_2l, y, p, two_pow_l);

    mpz_set_ui (y_p_map2[0], 1);
    for(unsigned long int i = 1; i < (unsigned long int)pow(2,l); i++){
    	mpz_powm_ui (y_p_map2[i], y_p_2l, i, p);
    }
    
    for(unsigned long int i = 1; i < s + 1; i++){
	mpz_pow_ui (two_pow_i, TWO, i*l);
	compute_nth_power_residue_symbol(y_p_2l, y, p, two_pow_i);
        for(unsigned long int j = 1; j < (unsigned long int)pow(2,l); j++){
		mpz_powm_ui (IT2[i][j], y_p_2l, j, p);
		mpz_invert (IT2[i][j], IT2[i][j], p);
	}
    }


    start_time = chrono::steady_clock::now();
    //generate_prime_optimized(p, p_bits, p_min_bits, k, 3623);
    decrpt(ptr_indext, s, l, two_pow_l, recover_m, y, c, k, p, y_p_map2, Z_map2, IT2);

    end_time = chrono::steady_clock::now(); // end to count the time

    gmp_printf ("recover_m: %Zd\n", recover_m);
    running_time = end_time - start_time;
    cout << "Decryption takes time = "
    << chrono::duration <double, milli> (running_time).count() << " ms" << endl;
    cout << "----------------------------------------------------" << endl;


    mpz_clear (p);
    mpz_clear (y);
    mpz_clear (recover_m);
    mpz_clear (c);
    mpz_clear (N);
    mpz_clear (two_pow_i);
    mpz_clear (TWO);
    map_clear (y_p_map, k);
    map_clear (Z_map, k);
    map_2clear (IT, s, l);
 //   map_2clear (IT1, 73, 16);
    map_2clear (IT2, 168, 10);
   // map_clear (y_p_map1, 1168);
   // map_clear (Z_map1, 1168);
    map_clear (y_p_map2, 1682);
    map_clear (Z_map2, 1682);
    mpz_clear (two_pow_l);
    mpz_clear (y_p_2l);

    return 0;
}


